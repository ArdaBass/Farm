#include <iostream>
#include <fstream>
#include <string>

const int MAX_SIZE = 40;

int main() {
    std::string fileName;
    std::cin >> fileName;

    std::ifstream file(fileName);
    if (!file) {
        std::cerr << "Error opening file: " << fileName << std::endl;
        return 1;
    }

    int width, height;
    file >> width >> height;

    int plantArray[MAX_SIZE][MAX_SIZE] = {0};
    int prevPlantArray[MAX_SIZE][MAX_SIZE] = {0};

    int year, stepCount;
    file >> year >> stepCount;

    for (int currentYear = year; currentYear < 2018; ++currentYear) {
        // Read and apply planting steps
        for (int step = 0; step < stepCount; ++step) {
            int x1, y1, x2, y2;
            file >> x1 >> y1 >> x2 >> y2;

            for (int y = y1; y <= y2; ++y) {
                for (int x = x1; x <= x2; ++x) {
                    plantArray[y][x]++;
                }
            }
        }

        // Apply aging rule
        if (year < currentYear) {
            for (int y = 0; y < height; ++y) {
                for (int x = 0; x < width; ++x) {
                    if (plantArray[y][x] != 0 &&
                        plantArray[y][x] == prevPlantArray[y][x]) {
                        plantArray[y][x]--;
                    }
                }
            }
        }

        // Store current state
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                prevPlantArray[y][x] = plantArray[y][x];
            }
        }

        // Prepare for next year
        if (currentYear < 2017) {
            int unused;
            file >> unused >> stepCount;
        }
    }

    // Output the final array
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            std::cout << plantArray[y][x];
            if (x < width - 1)
                std::cout << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
